
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from '@/components/ui/tabs';
import { Database } from 'lucide-react';

interface TableInfo {
  name: string;
  rowCount: number;
  size: string;
  description: string;
}

const DatabaseManagement = () => {
  const [activeTable, setActiveTable] = useState<string | null>(null);
  
  const { data: tables, isLoading: tablesLoading } = useQuery({
    queryKey: ['db-tables'],
    queryFn: async (): Promise<TableInfo[]> => {
      // This is a simplified version - in production this would be handled by an edge function
      // that has access to database metadata
      return [
        { name: 'ai_projects', rowCount: 5, size: '256 KB', description: 'AI project definitions and metadata' },
        { name: 'ai_generated_files', rowCount: 12, size: '512 KB', description: 'Files generated by AI for projects' },
        { name: 'inquiries', rowCount: 27, size: '1.2 MB', description: 'Client inquiry submissions' },
        { name: 'email_logs', rowCount: 45, size: '756 KB', description: 'Email notification logs' },
        { name: 'staff_profiles', rowCount: 8, size: '128 KB', description: 'Staff user profiles' },
        { name: 'subscribers', rowCount: 120, size: '384 KB', description: 'Newsletter subscribers' }
      ];
    }
  });
  
  const { data: tableData, isLoading: dataLoading } = useQuery({
    queryKey: ['table-data', activeTable],
    enabled: !!activeTable,
    queryFn: async () => {
      if (!activeTable) return null;
      
      const { data, error } = await supabase
        .from(activeTable)
        .select('*')
        .limit(10);
      
      if (error) throw error;
      return data;
    }
  });
  
  const { data: tableColumns, isLoading: columnsLoading } = useQuery({
    queryKey: ['table-columns', activeTable],
    enabled: !!activeTable,
    queryFn: async () => {
      if (!activeTable) return null;
      
      // This is a simplified mock since getting column metadata requires special permissions
      // In production, this would be handled by an edge function
      const mockColumns: Record<string, any[]> = {
        'ai_projects': [
          { name: 'id', type: 'uuid', nullable: false, default: 'gen_random_uuid()' },
          { name: 'name', type: 'text', nullable: false, default: null },
          { name: 'description', type: 'text', nullable: true, default: null },
          { name: 'status', type: 'text', nullable: true, default: 'planning' },
          { name: 'created_at', type: 'timestamp with time zone', nullable: true, default: 'now()' },
          { name: 'updated_at', type: 'timestamp with time zone', nullable: true, default: 'now()' }
        ],
        'ai_generated_files': [
          { name: 'id', type: 'uuid', nullable: false, default: 'gen_random_uuid()' },
          { name: 'project_id', type: 'uuid', nullable: true, default: null },
          { name: 'filename', type: 'text', nullable: false, default: null },
          { name: 'type', type: 'text', nullable: false, default: null },
          { name: 'storage_path', type: 'text', nullable: false, default: null },
          { name: 'prompt', type: 'text', nullable: true, default: null },
          { name: 'provider', type: 'text', nullable: true, default: null },
          { name: 'created_at', type: 'timestamp with time zone', nullable: true, default: 'now()' }
        ],
        'staff_profiles': [
          { name: 'id', type: 'uuid', nullable: false, default: null },
          { name: 'full_name', type: 'text', nullable: true, default: null },
          { name: 'position', type: 'text', nullable: true, default: null },
          { name: 'department', type: 'text', nullable: true, default: null },
          { name: 'avatar_url', type: 'text', nullable: true, default: null },
          { name: 'created_at', type: 'timestamp with time zone', nullable: false, default: 'now()' },
          { name: 'updated_at', type: 'timestamp with time zone', nullable: false, default: 'now()' }
        ],
        'inquiries': [
          { name: 'id', type: 'uuid', nullable: false, default: 'gen_random_uuid()' },
          { name: 'name', type: 'character varying', nullable: false, default: null },
          { name: 'email', type: 'character varying', nullable: false, default: null },
          { name: 'phone', type: 'character varying', nullable: true, default: null },
          { name: 'company', type: 'character varying', nullable: true, default: null },
          { name: 'message', type: 'text', nullable: true, default: null },
          { name: 'service', type: 'character varying', nullable: false, default: null },
          { name: 'created_at', type: 'timestamp with time zone', nullable: false, default: 'now()' },
          { name: 'processed', type: 'boolean', nullable: true, default: 'false' }
          // ... additional fields not shown for brevity
        ],
        'email_logs': [
          { name: 'id', type: 'uuid', nullable: false, default: 'gen_random_uuid()' },
          { name: 'email_type', type: 'character varying', nullable: false, default: null },
          { name: 'recipient', type: 'character varying', nullable: false, default: null },
          { name: 'subject', type: 'character varying', nullable: true, default: null },
          { name: 'sent_at', type: 'timestamp with time zone', nullable: false, default: 'now()' },
          { name: 'successful', type: 'boolean', nullable: true, default: 'true' },
          { name: 'error_message', type: 'text', nullable: true, default: null },
          { name: 'inquiry_id', type: 'uuid', nullable: true, default: null },
          { name: 'metadata', type: 'jsonb', nullable: true, default: null }
        ],
        'subscribers': [
          { name: 'id', type: 'uuid', nullable: false, default: 'gen_random_uuid()' },
          { name: 'email', type: 'character varying', nullable: false, default: null },
          { name: 'name', type: 'character varying', nullable: true, default: null },
          { name: 'subscribed_at', type: 'timestamp with time zone', nullable: false, default: 'now()' },
          { name: 'unsubscribed_at', type: 'timestamp with time zone', nullable: true, default: null },
          { name: 'active', type: 'boolean', nullable: true, default: 'true' },
          { name: 'source', type: 'character varying', nullable: true, default: null }
        ]
      };
      
      return mockColumns[activeTable] || [];
    }
  });

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        {tablesLoading ? (
          <div className="col-span-3 flex justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
          </div>
        ) : (
          tables?.map((table) => (
            <Card 
              key={table.name} 
              className={`cursor-pointer transition-all ${activeTable === table.name ? 'ring-2 ring-primary' : 'hover:shadow-md'}`}
              onClick={() => setActiveTable(table.name)}
            >
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">
                  {table.name}
                </CardTitle>
                <Database className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{table.rowCount.toLocaleString()}</div>
                <p className="text-xs text-muted-foreground">{table.description}</p>
                <div className="mt-2 text-xs text-muted-foreground">Size: {table.size}</div>
              </CardContent>
            </Card>
          ))
        )}
      </div>
      
      {activeTable && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>Table: {activeTable}</CardTitle>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="records">
              <TabsList>
                <TabsTrigger value="records">Records</TabsTrigger>
                <TabsTrigger value="structure">Structure</TabsTrigger>
              </TabsList>
              
              <TabsContent value="records" className="mt-4">
                {dataLoading ? (
                  <div className="flex justify-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                  </div>
                ) : tableData && tableData.length > 0 ? (
                  <div className="rounded-md border overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          {Object.keys(tableData[0]).map((key) => (
                            <TableHead key={key}>{key}</TableHead>
                          ))}
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {tableData.map((row, rowIndex) => (
                          <TableRow key={rowIndex}>
                            {Object.values(row).map((value, valueIndex) => (
                              <TableCell key={valueIndex}>
                                {typeof value === 'object' 
                                  ? JSON.stringify(value).substring(0, 30) + (JSON.stringify(value).length > 30 ? '...' : '') 
                                  : String(value).substring(0, 30) + (String(value).length > 30 ? '...' : '')}
                              </TableCell>
                            ))}
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    No records found in this table
                  </div>
                )}
                <div className="text-xs text-muted-foreground mt-4">
                  Showing up to 10 records. Full CRUD operations would be implemented in a production version.
                </div>
              </TabsContent>
              
              <TabsContent value="structure" className="mt-4">
                {columnsLoading ? (
                  <div className="flex justify-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                  </div>
                ) : tableColumns && tableColumns.length > 0 ? (
                  <div className="rounded-md border overflow-hidden">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Column Name</TableHead>
                          <TableHead>Data Type</TableHead>
                          <TableHead>Nullable</TableHead>
                          <TableHead>Default Value</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {tableColumns.map((column, index) => (
                          <TableRow key={index}>
                            <TableCell className="font-medium">{column.name}</TableCell>
                            <TableCell>{column.type}</TableCell>
                            <TableCell>{column.nullable ? 'Yes' : 'No'}</TableCell>
                            <TableCell>{column.default || '-'}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    No column information available
                  </div>
                )}
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      )}
      
      {!activeTable && (
        <div className="mt-6 text-center py-8 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <Database className="h-10 w-10 mx-auto text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-600 mb-2">Select a Table</h3>
          <p className="text-sm text-gray-500 max-w-md mx-auto">
            Click on any of the tables above to view its structure and data
          </p>
        </div>
      )}
    </div>
  );
};

export default DatabaseManagement;
